{"status":"ok","feed":{"url":"https://medium.com/feed/@fauzanghaza","title":"Stories by Fauzan Ghaza on Medium","link":"https://medium.com/@fauzanghaza?source=rss-318a050918e5------2","author":"","description":"Stories by Fauzan Ghaza on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*6vDxpe8aFzPOb8AZhiv3-g.png"},"items":[{"title":"Virtual Machines vs. Containers","pubDate":"2025-01-16 03:29:25","link":"https://fauzanghaza.medium.com/virtual-machines-vs-containers-14b39df4b5b9?source=rss-318a050918e5------2","guid":"https://medium.com/p/14b39df4b5b9","author":"Fauzan Ghaza","thumbnail":"","description":"\n<p>Understanding the Foundations of Modern Computing</p>\n<p>The debate between <strong>Virtual Machines (VMs)</strong> and <strong>Containers</strong> has been a cornerstone of modern computing, shaping how applications are deployed and scaled. Whether you\u2019re diving into DevOps, cloud computing, or software development, understanding the distinction between these technologies is essential.</p>\n<p>In this article, I\u2019ll break down the key differences, advantages, and disadvantages of both to help you grasp their use cases and make informed decisions.</p>\n<h3>What Are Virtual Machines?</h3>\n<p>Virtual Machines emulate an entire physical computer system, including its hardware, allowing multiple operating systems to run on the same hardware.</p>\n<h3>Key Characteristics:</h3>\n<ul>\n<li>\n<strong>Isolation</strong>:<br>VMs are highly isolated, with each running its own OS. This ensures that an issue in one VM doesn\u2019t impact\u00a0others.</li>\n<li>\n<strong>Flexibility</strong>:<br>Run different operating systems (e.g., Linux, Windows) on the same hardware, making them ideal for legacy systems or multi-OS environments.</li>\n<li>\n<strong>Resource Usage</strong>:<br>VMs require substantial resources since each instance includes a full OS, leading to higher memory and storage overhead.</li>\n</ul>\n<h3>Use Cases:</h3>\n<ul>\n<li>Hosting multiple operating systems on a single\u00a0server.</li>\n<li>Running legacy applications that require specific OS environments.</li>\n<li>Testing software in isolated, sandboxed environments.</li>\n</ul>\n<h3>What Are Containers?</h3>\n<p>Containers package an application and its dependencies into a lightweight, portable unit. Unlike VMs, containers share the host OS, making them more efficient.</p>\n<h3>Key Characteristics:</h3>\n<ul>\n<li>\n<strong>Lightweight</strong>:<br>Containers run without the overhead of a full operating system, sharing the host OS kernel\u00a0instead.</li>\n<li>\n<strong>Fast Startup</strong>:<br>Since they don\u2019t need to boot an entire OS, containers start and stop almost instantly.</li>\n<li>\n<strong>Portability</strong>:<br>Containers can run anywhere, whether it\u2019s your local machine, a cloud server, or a Kubernetes cluster.</li>\n</ul>\n<h3>Use Cases:</h3>\n<ul>\n<li>Deploying microservices in modern application architectures.</li>\n<li>Scaling applications horizontally with minimal resource\u00a0usage.</li>\n<li>Building Continuous Integration/Continuous Deployment (CI/CD) pipelines.</li>\n</ul>\n<h3>Key Differences</h3>\n<p>Here\u2019s a side-by-side comparison of Virtual Machines and Containers:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/930/1*uc4-dz-htcUqDpRh80ol7Q.png\"></figure><p><strong>Visual Summary:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DDU1ykfhH5895xlfcsb66A.png\"></figure><h3>Which One Should You\u00a0Use?</h3>\n<p>The choice between VMs and Containers depends on your specific\u00a0needs:</p>\n<ul>\n<li>Choose <strong>VMs</strong> if you require strong isolation, need to run different operating systems, or have legacy software dependencies.</li>\n<li>Choose <strong>Containers</strong> if you want lightweight, portable, and scalable solutions for modern application deployment.</li>\n</ul>\n<h3>Final Thoughts</h3>\n<p>Virtual Machines and Containers each have their place in modern computing. Understanding their differences is crucial to designing efficient, scalable, and cost-effective systems.</p>\n<p>Which one do you use most in your workflow, and why? Let me know in the comments\u00a0below!</p>\n<p>#VirtualMachines #Containers #DevOps #CloudComputing #Docker #Kubernetes #SoftwareEngineering #TechLearning #dezoomcamp #LearningInPublic</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=14b39df4b5b9\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Understanding the Foundations of Modern Computing</p>\n<p>The debate between <strong>Virtual Machines (VMs)</strong> and <strong>Containers</strong> has been a cornerstone of modern computing, shaping how applications are deployed and scaled. Whether you\u2019re diving into DevOps, cloud computing, or software development, understanding the distinction between these technologies is essential.</p>\n<p>In this article, I\u2019ll break down the key differences, advantages, and disadvantages of both to help you grasp their use cases and make informed decisions.</p>\n<h3>What Are Virtual Machines?</h3>\n<p>Virtual Machines emulate an entire physical computer system, including its hardware, allowing multiple operating systems to run on the same hardware.</p>\n<h3>Key Characteristics:</h3>\n<ul>\n<li>\n<strong>Isolation</strong>:<br>VMs are highly isolated, with each running its own OS. This ensures that an issue in one VM doesn\u2019t impact\u00a0others.</li>\n<li>\n<strong>Flexibility</strong>:<br>Run different operating systems (e.g., Linux, Windows) on the same hardware, making them ideal for legacy systems or multi-OS environments.</li>\n<li>\n<strong>Resource Usage</strong>:<br>VMs require substantial resources since each instance includes a full OS, leading to higher memory and storage overhead.</li>\n</ul>\n<h3>Use Cases:</h3>\n<ul>\n<li>Hosting multiple operating systems on a single\u00a0server.</li>\n<li>Running legacy applications that require specific OS environments.</li>\n<li>Testing software in isolated, sandboxed environments.</li>\n</ul>\n<h3>What Are Containers?</h3>\n<p>Containers package an application and its dependencies into a lightweight, portable unit. Unlike VMs, containers share the host OS, making them more efficient.</p>\n<h3>Key Characteristics:</h3>\n<ul>\n<li>\n<strong>Lightweight</strong>:<br>Containers run without the overhead of a full operating system, sharing the host OS kernel\u00a0instead.</li>\n<li>\n<strong>Fast Startup</strong>:<br>Since they don\u2019t need to boot an entire OS, containers start and stop almost instantly.</li>\n<li>\n<strong>Portability</strong>:<br>Containers can run anywhere, whether it\u2019s your local machine, a cloud server, or a Kubernetes cluster.</li>\n</ul>\n<h3>Use Cases:</h3>\n<ul>\n<li>Deploying microservices in modern application architectures.</li>\n<li>Scaling applications horizontally with minimal resource\u00a0usage.</li>\n<li>Building Continuous Integration/Continuous Deployment (CI/CD) pipelines.</li>\n</ul>\n<h3>Key Differences</h3>\n<p>Here\u2019s a side-by-side comparison of Virtual Machines and Containers:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/930/1*uc4-dz-htcUqDpRh80ol7Q.png\"></figure><p><strong>Visual Summary:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DDU1ykfhH5895xlfcsb66A.png\"></figure><h3>Which One Should You\u00a0Use?</h3>\n<p>The choice between VMs and Containers depends on your specific\u00a0needs:</p>\n<ul>\n<li>Choose <strong>VMs</strong> if you require strong isolation, need to run different operating systems, or have legacy software dependencies.</li>\n<li>Choose <strong>Containers</strong> if you want lightweight, portable, and scalable solutions for modern application deployment.</li>\n</ul>\n<h3>Final Thoughts</h3>\n<p>Virtual Machines and Containers each have their place in modern computing. Understanding their differences is crucial to designing efficient, scalable, and cost-effective systems.</p>\n<p>Which one do you use most in your workflow, and why? Let me know in the comments\u00a0below!</p>\n<p>#VirtualMachines #Containers #DevOps #CloudComputing #Docker #Kubernetes #SoftwareEngineering #TechLearning #dezoomcamp #LearningInPublic</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=14b39df4b5b9\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["data-engineering","computer-science","containers","linux","virtualization"]},{"title":"Building a Stress Prediction System with Machine Learning and MLOps","pubDate":"2025-01-02 10:47:43","link":"https://fauzanghaza.medium.com/building-a-stress-prediction-system-with-machine-learning-and-mlops-e6b6287376fd?source=rss-318a050918e5------2","guid":"https://medium.com/p/e6b6287376fd","author":"Fauzan Ghaza","thumbnail":"","description":"\n<p><strong>Introduction</strong></p>\n<p>Access to potable water is a critical global issue that affects millions of lives every day. The ability to predict water potability can help communities make informed decisions and ensure safer access to clean water. Recognizing this need, our team developed a robust machine learning (ML) service designed to analyze and predict water potability. This project emphasized scalability, security, and reproducibility by integrating cutting-edge tools and frameworks.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/735/1*7OomXOixk1zOG9xxhvDznQ.jpeg\"></figure><p>Water potability analysis is vital in identifying safe drinking water sources. Traditional methods often require manual sampling and testing, which can be time-consuming and resource-intensive. By leveraging machine learning, we aimed to provide a faster, more efficient way to analyze water potability using a scalable and automated system.</p>\n<p><strong>System Architecture</strong></p>\n<p>Our solution integrates several modern tools and frameworks to ensure a seamless and scalable implementation. Below is an overview of the system architecture:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*v6zUL-b5EQpkTS55N-pz1g.png\"></figure><ul>\n<li>\n<strong>\ud83d\udd0d MLflow (Experiment Tracking and Artifact Management):</strong> MLflow was employed to track and manage machine learning experiments. It allowed us to maintain reproducibility, version control, and efficient artifact\u00a0storage.</li>\n<li>\n<strong>\ud83d\udce6 MinIO (Secure Cloud Storage):</strong> MinIO, a high-performance object storage solution, was used to store datasets and model artifacts. Its S3 compatibility ensured secure and reliable access to\u00a0data.</li>\n<li>\n<strong>\ud83d\uddc2 PostgreSQL with pgAdmin (Metadata Repository):</strong> PostgreSQL was utilized as a metadata repository to manage structured data, while pgAdmin provided an intuitive interface for database management.</li>\n<li>\n<strong>\ud83d\udc0b Docker Compose (Container Orchestration):</strong> All system components, including MLflow, MinIO, and PostgreSQL, were containerized using Docker Compose. This ensured simplified deployment and scalability.</li>\n</ul>\n<p><strong>Deployment</strong></p>\n<p>To enable seamless communication between components, we utilized <strong>gRPC</strong>, a high-performance, open-source remote procedure call (RPC) framework. The benefits included:</p>\n<ul>\n<li>\n<strong>\u26a1 Speed:</strong> gRPC ensured low-latency communication, critical for real-time ML predictions.</li>\n<li>\n<strong>\ud83d\udcc8 Scalability:</strong> Its efficient serialization (Protocol Buffers) allowed the service to handle large-scale deployments with\u00a0ease.</li>\n</ul>\n<p><strong>Conclusion</strong></p>\n<p>This project taught us valuable lessons about integrating MLOps and cloud-native tools into real-world machine learning\u00a0systems:</p>\n<ol>\n<li>\n<strong>MLOps Is Essential:</strong> Tools like MLflow and Docker Compose streamline the development and deployment lifecycle, ensuring reproducibility and scalability.</li>\n<li>\n<strong>Security Matters:</strong> Using MinIO and environment variables enhanced the system\u2019s security and reliability.</li>\n<li>\n<strong>Collaboration Wins:</strong> Combining expertise across data science, DevOps, and software engineering led to an efficient and innovative solution.</li>\n</ol>\n<p>Our water potability ML service exemplifies how integrating modern tools and frameworks can solve real-world problems efficiently. From experiment tracking to scalable deployment, the project demonstrates the power of MLOps in building impactful solutions.</p>\n<p>Explore the full implementation and architecture details on\u00a0<a href=\"https://github.com/Lab-ICN/water-potability-ml-service.git\"><strong>GitHub</strong></a>.</p>\n<p>Let\u2019s create a safer, more sustainable future together\u200a\u2014\u200aone drop at a\u00a0time.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e6b6287376fd\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p><strong>Introduction</strong></p>\n<p>Access to potable water is a critical global issue that affects millions of lives every day. The ability to predict water potability can help communities make informed decisions and ensure safer access to clean water. Recognizing this need, our team developed a robust machine learning (ML) service designed to analyze and predict water potability. This project emphasized scalability, security, and reproducibility by integrating cutting-edge tools and frameworks.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/735/1*7OomXOixk1zOG9xxhvDznQ.jpeg\"></figure><p>Water potability analysis is vital in identifying safe drinking water sources. Traditional methods often require manual sampling and testing, which can be time-consuming and resource-intensive. By leveraging machine learning, we aimed to provide a faster, more efficient way to analyze water potability using a scalable and automated system.</p>\n<p><strong>System Architecture</strong></p>\n<p>Our solution integrates several modern tools and frameworks to ensure a seamless and scalable implementation. Below is an overview of the system architecture:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*v6zUL-b5EQpkTS55N-pz1g.png\"></figure><ul>\n<li>\n<strong>\ud83d\udd0d MLflow (Experiment Tracking and Artifact Management):</strong> MLflow was employed to track and manage machine learning experiments. It allowed us to maintain reproducibility, version control, and efficient artifact\u00a0storage.</li>\n<li>\n<strong>\ud83d\udce6 MinIO (Secure Cloud Storage):</strong> MinIO, a high-performance object storage solution, was used to store datasets and model artifacts. Its S3 compatibility ensured secure and reliable access to\u00a0data.</li>\n<li>\n<strong>\ud83d\uddc2 PostgreSQL with pgAdmin (Metadata Repository):</strong> PostgreSQL was utilized as a metadata repository to manage structured data, while pgAdmin provided an intuitive interface for database management.</li>\n<li>\n<strong>\ud83d\udc0b Docker Compose (Container Orchestration):</strong> All system components, including MLflow, MinIO, and PostgreSQL, were containerized using Docker Compose. This ensured simplified deployment and scalability.</li>\n</ul>\n<p><strong>Deployment</strong></p>\n<p>To enable seamless communication between components, we utilized <strong>gRPC</strong>, a high-performance, open-source remote procedure call (RPC) framework. The benefits included:</p>\n<ul>\n<li>\n<strong>\u26a1 Speed:</strong> gRPC ensured low-latency communication, critical for real-time ML predictions.</li>\n<li>\n<strong>\ud83d\udcc8 Scalability:</strong> Its efficient serialization (Protocol Buffers) allowed the service to handle large-scale deployments with\u00a0ease.</li>\n</ul>\n<p><strong>Conclusion</strong></p>\n<p>This project taught us valuable lessons about integrating MLOps and cloud-native tools into real-world machine learning\u00a0systems:</p>\n<ol>\n<li>\n<strong>MLOps Is Essential:</strong> Tools like MLflow and Docker Compose streamline the development and deployment lifecycle, ensuring reproducibility and scalability.</li>\n<li>\n<strong>Security Matters:</strong> Using MinIO and environment variables enhanced the system\u2019s security and reliability.</li>\n<li>\n<strong>Collaboration Wins:</strong> Combining expertise across data science, DevOps, and software engineering led to an efficient and innovative solution.</li>\n</ol>\n<p>Our water potability ML service exemplifies how integrating modern tools and frameworks can solve real-world problems efficiently. From experiment tracking to scalable deployment, the project demonstrates the power of MLOps in building impactful solutions.</p>\n<p>Explore the full implementation and architecture details on\u00a0<a href=\"https://github.com/Lab-ICN/water-potability-ml-service.git\"><strong>GitHub</strong></a>.</p>\n<p>Let\u2019s create a safer, more sustainable future together\u200a\u2014\u200aone drop at a\u00a0time.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e6b6287376fd\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["docker","mlops","enviromental-technology","machine-learning","data-science"]}]}